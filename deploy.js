require("dotenv").config();
const { ethers } = require("ethers");

const abi = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "electionId",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "candidateId",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "string",
        "name": "name",
        "type": "string"
      }
    ],
    "name": "CandidateAdded",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "id",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "string",
        "name": "name",
        "type": "string"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "startTime",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "endTime",
        "type": "uint256"
      }
    ],
    "name": "ElectionCreated",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "electionId",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "candidateId",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "address",
        "name": "voter",
        "type": "address"
      }
    ],
    "name": "Voted",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_electionId",
        "type": "uint256"
      },
      {
        "internalType": "string",
        "name": "_name",
        "type": "string"
      }
    ],
    "name": "addCandidate",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "admin",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_electionName",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "_startTime",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "_endTime",
        "type": "uint256"
      }
    ],
    "name": "createElection",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "electionCount",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "elections",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "id",
        "type": "uint256"
      },
      {
        "internalType": "string",
        "name": "electionName",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "startTime",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "endTime",
        "type": "uint256"
      },
      {
        "internalType": "bool",
        "name": "isActive",
        "type": "bool"
      },
      {
        "internalType": "uint256",
        "name": "candidateCount",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_electionId",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "_candidateId",
        "type": "uint256"
      }
    ],
    "name": "getCandidate",
    "outputs": [
      {
        "internalType": "string",
        "name": "name",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "voteCount",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_electionId",
        "type": "uint256"
      }
    ],
    "name": "isElectionActive",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_electionId",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "_candidateId",
        "type": "uint256"
      }
    ],
    "name": "vote",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
];

const bytecode = "0x6080604052348015600f57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061167d8061005f6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063997d28301161005b578063997d283014610153578063b384abef14610171578063f49a7a171461018d578063f851a440146101a957610088565b80631750a3d01461008d5780634bd46448146100bd5780635e6fef01146100ee5780636ee17f6f14610123575b600080fd5b6100a760048036038101906100a29190610be6565b6101c7565b6040516100b49190610c51565b60405180910390f35b6100d760048036038101906100d29190610c6c565b61037c565b6040516100e5929190610d2b565b60405180910390f35b61010860048036038101906101039190610d5b565b6104de565b60405161011a96959493929190610da3565b60405180910390f35b61013d60048036038101906101389190610d5b565b6105af565b60405161014a9190610e0b565b60405180910390f35b61015b610601565b6040516101689190610c51565b60405180910390f35b61018b60048036038101906101869190610c6c565b610607565b005b6101a760048036038101906101a29190610e26565b61085e565b005b6101b1610a32565b6040516101be9190610ed6565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024f90610f63565b60405180910390fd5b82600154811061029d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029490610fcf565b60405180910390fd5b60006002600086815260200190815260200160002090506000816005015490506040518060600160405280828152602001868152602001600081525082600601600083815260200190815260200160002060008201518160000155602082015181600101908161030d91906111fb565b5060408201518160020155905050816005016000815480929190610330906112fc565b91905055507fed8911b3df733b7d5f75724158e54478ea12e30f49c9d31b5261879f5b76586f86828760405161036893929190611344565b60405180910390a180935050505092915050565b606060008360015481106103c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bc90610fcf565b60405180910390fd5b600060026000878152602001908152602001600020905080600501548510610422576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610419906113ce565b60405180910390fd5b600081600601600087815260200190815260200160002090508060010181600201548180546104509061101e565b80601f016020809104026020016040519081016040528092919081815260200182805461047c9061101e565b80156104c95780601f1061049e576101008083540402835291602001916104c9565b820191906000526020600020905b8154815290600101906020018083116104ac57829003601f168201915b50505050509150945094505050509250929050565b60026020528060005260406000206000915090508060000154908060010180546105079061101e565b80601f01602080910402602001604051908101604052809291908181526020018280546105339061101e565b80156105805780601f1061055557610100808354040283529160200191610580565b820191906000526020600020905b81548152906001019060200180831161056357829003601f168201915b5050505050908060020154908060030154908060040160009054906101000a900460ff16908060050154905086565b600080600260008481526020019081526020016000209050806002015442101580156105df575080600301544211155b80156105f957508060040160009054906101000a900460ff165b915050919050565b60015481565b81600154811061064c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064390610fcf565b60405180910390fd5b60006002600085815260200190815260200160002090508060020154421015801561067b575080600301544211155b6106ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b19061143a565b60405180910390fd5b8060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610749576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610740906114a6565b60405180910390fd5b8060050154831061078f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610786906113ce565b60405180910390fd5b600081600601600085815260200190815260200160002090508060020160008154809291906107bd906112fc565b919050555060018260070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd91ecafccf238642dccd41161308b3eebe62a12bc5819daf5164780c221ec95b85853360405161084f939291906114c6565b60405180910390a15050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e390610f63565b60405180910390fd5b42821161092e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092590611549565b60405180910390fd5b808210610970576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610967906115db565b60405180910390fd5b600060026000600154815260200190815260200160002090508381600101908161099a91906111fb565b5082816002018190555081816003018190555060018160040160006101000a81548160ff02191690831515021790555060015481600001819055507fe7a0aae5d733e07e246dea86213a1ac1b0aa8554bde889bb75c12752f44e53d9600154858585604051610a0c94939291906115fb565b60405180910390a160016000815480929190610a27906112fc565b919050555050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610a7d81610a6a565b8114610a8857600080fd5b50565b600081359050610a9a81610a74565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610af382610aaa565b810181811067ffffffffffffffff82111715610b1257610b11610abb565b5b80604052505050565b6000610b25610a56565b9050610b318282610aea565b919050565b600067ffffffffffffffff821115610b5157610b50610abb565b5b610b5a82610aaa565b9050602081019050919050565b82818337600083830152505050565b6000610b89610b8484610b36565b610b1b565b905082815260208101848484011115610ba557610ba4610aa5565b5b610bb0848285610b67565b509392505050565b600082601f830112610bcd57610bcc610aa0565b5b8135610bdd848260208601610b76565b91505092915050565b60008060408385031215610bfd57610bfc610a60565b5b6000610c0b85828601610a8b565b925050602083013567ffffffffffffffff811115610c2c57610c2b610a65565b5b610c3885828601610bb8565b9150509250929050565b610c4b81610a6a565b82525050565b6000602082019050610c666000830184610c42565b92915050565b60008060408385031215610c8357610c82610a60565b5b6000610c9185828601610a8b565b9250506020610ca285828601610a8b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ce6578082015181840152602081019050610ccb565b60008484015250505050565b6000610cfd82610cac565b610d078185610cb7565b9350610d17818560208601610cc8565b610d2081610aaa565b840191505092915050565b60006040820190508181036000830152610d458185610cf2565b9050610d546020830184610c42565b9392505050565b600060208284031215610d7157610d70610a60565b5b6000610d7f84828501610a8b565b91505092915050565b60008115159050919050565b610d9d81610d88565b82525050565b600060c082019050610db86000830189610c42565b8181036020830152610dca8188610cf2565b9050610dd96040830187610c42565b610de66060830186610c42565b610df36080830185610d94565b610e0060a0830184610c42565b979650505050505050565b6000602082019050610e206000830184610d94565b92915050565b600080600060608486031215610e3f57610e3e610a60565b5b600084013567ffffffffffffffff811115610e5d57610e5c610a65565b5b610e6986828701610bb8565b9350506020610e7a86828701610a8b565b9250506040610e8b86828701610a8b565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec082610e95565b9050919050565b610ed081610eb5565b82525050565b6000602082019050610eeb6000830184610ec7565b92915050565b7f4f6e6c792061646d696e2063616e20706572666f726d2074686973206163746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b6000610f4d602283610cb7565b9150610f5882610ef1565b604082019050919050565b60006020820190508181036000830152610f7c81610f40565b9050919050565b7f456c656374696f6e20494420646f6573206e6f74206578697374000000000000600082015250565b6000610fb9601a83610cb7565b9150610fc482610f83565b602082019050919050565b60006020820190508181036000830152610fe881610fac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061103657607f821691505b60208210810361104957611048610fef565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026110b17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611074565b6110bb8683611074565b95508019841693508086168417925050509392505050565b6000819050919050565b60006110f86110f36110ee84610a6a565b6110d3565b610a6a565b9050919050565b6000819050919050565b611112836110dd565b61112661111e826110ff565b848454611081565b825550505050565b600090565b61113b61112e565b611146818484611109565b505050565b5b8181101561116a5761115f600082611133565b60018101905061114c565b5050565b601f8211156111af576111808161104f565b61118984611064565b81016020851015611198578190505b6111ac6111a485611064565b83018261114b565b50505b505050565b600082821c905092915050565b60006111d2600019846008026111b4565b1980831691505092915050565b60006111eb83836111c1565b9150826002028217905092915050565b61120482610cac565b67ffffffffffffffff81111561121d5761121c610abb565b5b611227825461101e565b61123282828561116e565b600060209050601f8311600181146112655760008415611253578287015190505b61125d85826111df565b8655506112c5565b601f1984166112738661104f565b60005b8281101561129b57848901518255600182019150602085019450602081019050611276565b868310156112b857848901516112b4601f8916826111c1565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061130782610a6a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611339576113386112cd565b5b600182019050919050565b60006060820190506113596000830186610c42565b6113666020830185610c42565b81810360408301526113788184610cf2565b9050949350505050565b7f496e76616c69642063616e646964617465204944000000000000000000000000600082015250565b60006113b8601483610cb7565b91506113c382611382565b602082019050919050565b600060208201905081810360008301526113e7816113ab565b9050919050565b7f456c656374696f6e206973206e6f742061637469766500000000000000000000600082015250565b6000611424601683610cb7565b915061142f826113ee565b602082019050919050565b6000602082019050818103600083015261145381611417565b9050919050565b7f596f75206861766520616c726561647920766f74656400000000000000000000600082015250565b6000611490601683610cb7565b915061149b8261145a565b602082019050919050565b600060208201905081810360008301526114bf81611483565b9050919050565b60006060820190506114db6000830186610c42565b6114e86020830185610c42565b6114f56040830184610ec7565b949350505050565b7f53746172742074696d65206d75737420626520696e2074686520667574757265600082015250565b6000611533602083610cb7565b915061153e826114fd565b602082019050919050565b6000602082019050818103600083015261156281611526565b9050919050565b7f53746172742074696d652073686f756c64206265206265666f726520656e642060008201527f74696d6500000000000000000000000000000000000000000000000000000000602082015250565b60006115c5602483610cb7565b91506115d082611569565b604082019050919050565b600060208201905081810360008301526115f4816115b8565b9050919050565b60006080820190506116106000830187610c42565b81810360208301526116228186610cf2565b90506116316040830185610c42565b61163e6060830184610c42565b9594505050505056fea26469706673582212203301bd783231f5d06d55926e7a8a985316ba1b524ab6ab0f4fd1bed11305846264736f6c634300081c0033";

async function main() {
    console.log("Deploying contract...");

    // Initialize provider and wallet
    const provider = new ethers.JsonRpcProvider("HTTP://127.0.0.1:7545");
    const wallet = new ethers.Wallet("87ff5686abb4c5370f1f898b6c3290d6b7811c564d46598b5602599ab77295e9", provider);

    // Create a Contract Factory
    const factory = new ethers.ContractFactory(abi, bytecode, wallet);

    // Deploy the contract
    const contract = await factory.deploy(); // Use factory.deploy() to deploy
    console.log("Waiting for contract deployment...");
    await contract.deploymentTransaction().wait();

    console.log("Contract deployed at:", contract.target); // contract.target holds the address
}

main().catch((error) => {
    console.error("Error:", error);
});